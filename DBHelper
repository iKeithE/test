# Sub class

package codeTest;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.omg.PortableServer.IdAssignmentPolicy;

import com.gwservices.interview.Check;
import com.sun.jndi.url.iiopname.iiopnameURLContextFactory;

public class DBHandler extends CodeTestExerciseJdbc{

	//JDBC driver and database URL
	static final String JDBC_DRIVER = "org.h2.Driver";
	static final String DB_URL = "jdbc:h2:tcp://localhost:9092/codeTest";
	
	//Database credentials
	static final String USERNAME_STRING = "sa";
	static final String PASSWORD_STRING = "";
	
	static Connection conn;
	static Statement stmt;
	
	Check[] result = new Check[10];

	public static void main(String[] args){
		
		//Create instance of superClass
		CodeTestExerciseJdbc ct = new DBHandler();
		
		//Nullify connection and statement
		conn = null;
		stmt = null; 
		
		
		//Register JDBC driver
		try {
			Class.forName(JDBC_DRIVER);
			System.out.println("Connecting to Database...");
			
			//Open Connection
			conn = DriverManager.getConnection(DB_URL, USERNAME_STRING, PASSWORD_STRING);
			
			//Call methods from super class to get unprocessed checks
			ct.getEligibleChecks();
			
			
		} catch (SQLException se) {
			//Handle JDBC Errors 
			se.printStackTrace();
		}catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
			
		
		
	}//End main method
	
	/*The first method is the getEligibleChecks() method in which you will need to retrieve all of the checks in the data-
	  base table that are not marked as “Processed”.
	 */
	@Override
	public Check[] getEligibleChecks() {
		
		
		//Testing polymorphism
		System.out.print("Un-Processed Checks:\n\n");
		
		//Execute query
		try {
			stmt = conn.createStatement();
			String sql;
			sql = "SELECT * FROM CC_CHECK WHERE processed = FALSE";
			
			//Get ResultSet from database using SQL
			ResultSet rs = stmt.executeQuery(sql);
			
			//Convert resultSet to Array
			while(rs.next())
			{
				
			}//End while
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return null;
	}//End getEligibleChecks method

	@Override
	public void processCheck(Check unprocessedCheck) {
		
	}//End processCheck

}//End subclass of CodeTestExerciseJdbc
